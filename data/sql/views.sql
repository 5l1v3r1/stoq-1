--
-- Copyright (C) 2006,2007 Async Open Source
--
-- This program is free software; you can redistribute it and/or
-- modify it under the terms of the GNU Lesser General Public License
-- as published by the Free Software Foundation; either version 2
-- of the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
--
--
-- Author(s):       Evandro Vale Miquelito      <evandro@async.com.br>
--                  Johan Dahlin                <jdahlin@async.com.br>
--

--
-- Views
--

--
-- Stores information about sales
--
-- Available fields are:
--     id                 - the id of the sale table
--     coupon_id          - the id generated by the fiscal printer
--     open_date          - the date when the sale was started
--     confirm_date       - the date when the sale was confirmed
--     close_date         - the date when the sale was closed
--     cancel_date        - the date when the sale was cancelled
--     notes              - sale order general notes
--     status             - the sale status
--     salesperson_name   - the salesperson name
--     client_name        - the sale client name
--     client_id          - the if of the client table
--     subtotal           - the sum of all items in the sale
--     surcharge_value    - the sale surcharge value
--     discount_value     - the sale discount value
--     total              - the subtotal - discount + charge
--     total_quantity     - the items total quantity for the sale
--
--  Callsites:
--   
--   stoqlib/domain/person.py
--   stoqlib/gui/search/salesearch.py
--   stoqlib/gui/slaves/saleslave.py
--   stoqlib/gui/dialogs/saledetails.p
--   stoqlib/gui/wizards/salereturnwizard.py
--   stoqlib/reporting/sale.py
--   stoq/gui/receivable/receivable.py
--   stoq/gui/sales/sales.py
--   stoq/gui/till/till.py
--
CREATE VIEW sale_view AS

  SELECT DISTINCT
    sale_id AS id,
    sale.coupon_id AS coupon_id,
    sale.open_date AS open_date,
    sale.close_date AS close_date,
    sale.status AS status,
    sale.surcharge_value AS surcharge_value,
    sale.discount_value AS discount_value,
    sale.confirm_date AS confirm_date,
    sale.cancel_date AS cancel_date,
    sale.notes AS notes,
    sale.client_id AS client_id,
    client_person.name AS client_name,
    person.name AS salesperson_name,
    sum(quantity * price) - sale.discount_value + sale.surcharge_value AS total,
    sum(quantity * price) AS subtotal,
    sum(quantity) AS total_quantity

  FROM asellable_item, person_adapt_to_sales_person, person, sale
    
    LEFT JOIN person_adapt_to_client
    ON (sale.client_id = person_adapt_to_client.id)

    LEFT JOIN person AS client_person
    ON (person_adapt_to_client.original_id = client_person.id)

  WHERE sale.is_valid_model = 't' AND
        asellable_item.sale_id = sale_id AND
        sale.salesperson_id = person_adapt_to_sales_person.id AND
        person_adapt_to_sales_person.original_id = person.id
 
  GROUP BY asellable_item.sale_id, sale.id,
           sale.coupon_id,
           sale.surcharge_value, sale.discount_value, 
           sale.open_date, sale.close_date,
           sale.status, sale.confirm_date,
           sale.cancel_date, sale.notes,
           sale.client_id,
           client_person.name,
           person.name

  HAVING sale_id = sale.id;


--
-- Stores information about purchase orders.
-- Available fields are:
--    id                      - the if of purchase_order table
--    status                  - the purchase order status
--    open_date               - the date when the order was started
--    quote_deadline          - the date when the quotation expires
--    expected_receival_date  - expected date to receive products
--    expected_pay_date       - expected date to pay the products
--    receival_date           - the date when the products were received
--    confirm_date            - the date when the order was confirmed
--    salesperson_name        - the name of supplier's salesperson
--    freight                 - the freight value
--    surcharge_value         - the surcharge value for the order total
--    discount_value          - the discount_value for the order total
--    supplier_name           - the supplier name
--    transporter_name        - the transporter name
--    branch_name             - the branch company name
--    ordered_quantity        - the total quantity ordered
--    received_quantity       - the total quantity received
--    subtotal                - the order subtotal (sum of product values)
--    total                   - subtotal - discount_value + surcharge_value
--
-- Callsites:
--
--   stoqlib/gui/wizards/receivingwizard.py
--   stoqlib/reporting/purchase.py
--   stoq/gui/purchase/purchase.py
--
CREATE VIEW purchase_order_view AS

  SELECT DISTINCT
    purchase_order.id AS id,
    purchase_order.status AS status,
    purchase_order.open_date AS open_date,
    purchase_order.quote_deadline AS quote_deadline,
    purchase_order.expected_receival_date AS expected_receival_date,
    purchase_order.expected_pay_date AS expected_pay_date,
    purchase_order.receival_date AS receival_date,
    purchase_order.confirm_date AS confirm_date,
    purchase_order.salesperson_name AS salesperson_name,
    purchase_order.freight AS freight,
    purchase_order.surcharge_value AS surcharge_value,
    purchase_order.discount_value AS discount_value,
    supplier_person.name AS supplier_name,
    transporter_person.name AS transporter_name,
    branch_person.name AS branch_name,
    sum(quantity) AS ordered_quantity,
    sum(quantity_received) AS received_quantity,
    sum(cost*quantity) AS subtotal,
    sum(cost*quantity) - purchase_order.discount_value + purchase_order.surcharge_value AS total

  FROM person_adapt_to_supplier,
       person AS supplier_person,
       person_adapt_to_branch,
       purchase_item,
       person AS branch_person,
       purchase_order
       
    LEFT JOIN person_adapt_to_transporter
    ON (purchase_order.transporter_id = person_adapt_to_transporter.id)

    LEFT JOIN person AS transporter_person
    ON (person_adapt_to_transporter.original_id = transporter_person.id)

  WHERE purchase_order.is_valid_model = 't' AND
        person_adapt_to_supplier.original_id = supplier_person.id AND
        person_adapt_to_branch.original_id = branch_person.id AND
        purchase_order.supplier_id = person_adapt_to_supplier.id AND
        purchase_order.branch_id = person_adapt_to_branch.id AND
        purchase_item.order_id = purchase_order.id

  GROUP BY purchase_item.order_id,
           purchase_order.id,
           purchase_order.status,
           purchase_order.open_date,
           purchase_order.quote_deadline,
           purchase_order.expected_receival_date,
           purchase_order.expected_pay_date,
           purchase_order.receival_date,
           purchase_order.confirm_date,
           purchase_order.salesperson_name,
           purchase_order.freight,
           purchase_order.surcharge_value,
           purchase_order.discount_value,
           supplier_person.name,
           transporter_person.name,
           branch_person.name

  HAVING order_id = purchase_order.id;
